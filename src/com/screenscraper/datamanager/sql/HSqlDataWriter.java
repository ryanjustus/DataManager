/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

package com.screenscraper.datamanager.sql;


import com.screenscraper.datamanager.DataNode;
import com.screenscraper.datamanager.DataObject;
import com.screenscraper.datamanager.RelationalSchema;
import com.screenscraper.datamanager.SchemaKey;
import java.sql.*;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.concurrent.ConcurrentHashMap;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;

/**
 * DataWriter specific to the Hypersonic database
 * @author ryan
 */
public class HSqlDataWriter extends SqlDataWriter
{
  private Log log = LogFactory.getLog(HSqlDataWriter.class);
  public HSqlDataWriter(SqlDataManager dm, ConcurrentHashMap lastAi)
  {
      super(dm, lastAi);
      super.autoIncrementSupported = false;
  }

	/**
	 * Hypersonic versions doesn't support autogenerated pk retrieval at the JDBC level so this runs
	 * the function 'CALL IDENTITY()' after insertion, see http://www.hsqldb.org/doc/guide/ch09.html
	 * @param ps
	 * @param n
	 * @return
	 * @throws SQLException
	 */
    @Override
    protected Map<String,DataObject> retrieveLastKey(PreparedStatement ps,DataNode n) throws SQLException
    {
        RelationalSchema s = n.getSchema();

        //Find which column was auto generated
        SchemaKey k = s.getPrimaryKey();
        List<String> columns = k.getColumns();
        String genColumn = null;
        for(String column : columns){
            if(s.getAutoGeneratedColumns().contains(column)){
                genColumn = column;
                break;
            }
        }


        Map<String,DataObject> ret = new HashMap<String,DataObject>();
        if(genColumn==null){
            //there is no auto gen column
            return ret;
        }
        //if the value was already set, return it
        DataObject val = n.getValue(genColumn);
        if(val!=null && val.getObject()!=null){
            ret.put(genColumn, val);
            return ret;
        }

        //lookup autogenerated value
        Connection con = ps.getConnection();
        try
        {
            ps = con.prepareStatement("call identity()");
            ResultSet rs =ps.executeQuery();
            if(rs.next()){
                Set<String> autoColumns = s.getAutoGeneratedColumns();
                String auto = autoColumns.iterator().next();
                DataObject o = s.convertToDataObject(auto,rs.getObject(1));
                ret.put(auto, o);
            }
        }catch(SQLException e) {            
            log.error("Error while retrieving auto-increment keys for " + n.getSchema().getName(), e);
        }
        return ret;
    }
}