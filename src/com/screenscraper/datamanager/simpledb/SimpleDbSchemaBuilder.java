/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

package com.screenscraper.datamanager.simpledb;


import com.screenscraper.datamanager.DataObject.ObjectType;
import com.screenscraper.datamanager.RelationalSchema;
import com.screenscraper.datamanager.SchemaKey;
import com.screenscraper.datamanager.DatabaseSchema;
import com.screenscraper.datamanager.simpledb.SimpleDbSchema.SimpleDbSchemaAttrs;
import com.screenscraper.datamanager.skeleton.BasicDataManager;
import com.screenscraper.datamanager.skeleton.BasicSchemaAttr;
import java.io.File;
import java.io.IOException;
import java.security.NoSuchAlgorithmException;
import java.util.Arrays;
import java.util.Set;
import java.util.logging.Level;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.NodeList;
import org.xml.sax.SAXException;
/**
 *
 * @author ryan
 */
public class SimpleDbSchemaBuilder {
    
    DatabaseSchema schemas;
    public SimpleDbSchemaBuilder(File file) throws ParserConfigurationException, SAXException, IOException
    {
        schemas = new DatabaseSchema();

        DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();
        DocumentBuilder db = dbf.newDocumentBuilder();
        Document doc = db.parse(file);
        doc.getDocumentElement().normalize();
        NodeList nodeLst = doc.getElementsByTagName("schema");
        for (int s = 0; s < nodeLst.getLength(); s++) {
            Element schemaElement = (Element)nodeLst.item(s);
            schemas.addRelationalSchema(parseSchema(schemaElement));
        }
        System.out.println(schemas.toString());
    }

    public DatabaseSchema getSchemas()
    {
        return schemas;
    }

    private SimpleDbSchema parseSchema(Element schemaElement)
    {
        String schemaName = schemaElement.getAttribute("name");
        SimpleDbSchema s = new SimpleDbSchema(schemaName);

        String primaryKey = schemaElement.getAttribute("key");
        //this is so we can compare without null pointer exceptions
        primaryKey = (primaryKey==null) ? "" : primaryKey;
        
        NodeList attributes = schemaElement.getElementsByTagName("attribute");
        for(int i=0;i<attributes.getLength();i++)
        {
            Element attribute = (Element)attributes.item(i);
            String key = attribute.getAttribute("name");
            s.addColumn(key, ObjectType.String);

            if(key==null || key.equals(""))
                throw new IllegalStateException("atttribute name cannot be empty");
            String type = attribute.getAttribute("type");
            if(type==null){
                type="String";
            }else if (SimpleDbSchemaAttrs.autoGenType.getOptions().contains(type)){
                s.addAttr(key, BasicSchemaAttr.autoGenerated, BasicSchemaAttr.Option.yes.toString());
                s.addAttr(key, SimpleDbSchemaAttrs.autoGenType,type);
                //get the columns to apply this to if necessary
                String autoColumns = attribute.getAttribute("autoColumns");
                if(autoColumns!=null){
                    s.addAttr(key, SimpleDbSchemaAttrs.autoColumns, autoColumns);
                }
                type="String";
            }
            if(key.equals(primaryKey)){
                SchemaKey k = new SchemaKey(key, SchemaKey.Type.primary, Arrays.asList(key));
                s.setPrimaryKey(k);
            }
            s.setObjectType(key, typeFromString(type));
            System.out.println();

            int size =-1;
            try{
                String sizeString = attribute.getAttribute("size");
                if(sizeString!=null && !sizeString.isEmpty())
                    size = Integer.parseInt(sizeString);
            }catch(NumberFormatException e){
                System.err.println("NumberFormatException for attr 'size': " + attribute.getAttribute("size"));
            }
            s.addAttr(key,BasicSchemaAttr.size, String.valueOf(size));
       
            String defaultValue = attribute.getAttribute("defaultValue");
            s.addAttr(key,BasicSchemaAttr.defaultValue, defaultValue);

            String nullable = attribute.getAttribute(BasicSchemaAttr.isNullable.toString());
            if(nullable==null || !nullable.toLowerCase().equals("null"))
                nullable=BasicSchemaAttr.Option.yes.toString();
            else
                nullable=BasicSchemaAttr.Option.falseVal.toString();
                 
            s.addAttr(key,BasicSchemaAttr.isNullable, nullable);
        }

        NodeList relationships = schemaElement.getElementsByTagName("relationship");
        for(int i=0;i<relationships.getLength();i++)
        {
            Element relationship = (Element)relationships.item(i);
            String key = relationship.getAttribute("name");
            String parentSchema = relationship.getAttribute("parentSchema");
            if(parentSchema==null || parentSchema.equals(""))
                throw new IllegalStateException("parent Schema not not defined in relationship");
            String format = relationship.getAttribute("format");
            ObjectType type= typeFromString(relationship.getAttribute("type"));
            //deal with special case of single value schema
            if(SimpleDbSchemaAttrs.Option.singleValue.isEqual(format)){
                addSingleValueRelationship(s,key,parentSchema, type);
            }else if(SimpleDbSchemaAttrs.Option.json.isEqual(format)){
                addSubDocumentRelationship(s,parentSchema);
            }else if(SimpleDbSchemaAttrs.Option.domain.isEqual(format)){
                addDomainRelationship(s,key,parentSchema,type);
            }else{
                throw new IllegalStateException("relationship format " + format + " not supported. Must be in " + 
                        SimpleDbSchemaAttrs.Option.values());
            }
        }
        return s;
    }

    private void addSingleValueRelationship(SimpleDbSchema s, String key, String parentSchema, ObjectType type){
        key=s.getName(); 
        RelationalSchema parent = schemas.getRelationalSchema(parentSchema);
        s.addColumn(key, type);
        String relColumn="";
        try{
            relColumn = "$"+BasicDataManager.generateUID("rand");
        }catch(NoSuchAlgorithmException e){
            e.printStackTrace();
        }
        s.addColumn(relColumn, ObjectType.String);
        s.addRelationship(relColumn, parent, SimpleDbSchemaAttrs.Option.singleValue.toString());
    }

    private void addSubDocumentRelationship(SimpleDbSchema s, String parentSchema){
        String key = "";
        try {
            key = "$" + BasicDataManager.generateUID("rand");
        } catch (NoSuchAlgorithmException ex) {
            java.util.logging.Logger.getLogger(SimpleDbSchemaBuilder.class.getName()).log(Level.SEVERE, null, ex);
        }
        s.addColumn(key, ObjectType.Object);
        s.addRelationship(key, schemas.getRelationalSchema(parentSchema), SimpleDbSchemaAttrs.Option.json.toString());
        s.setObjectType(key, ObjectType.Object);
    }

    private void addDomainRelationship(SimpleDbSchema s, String key, String parentSchema, ObjectType type){
        if(s.getKeys().isEmpty())
            throw new IllegalStateException("key must be defined for domain schema " + s);
        s.addRelationship(key, schemas.getRelationalSchema(parentSchema), SimpleDbSchemaAttrs.Option.domain.toString());

        s.setObjectType(key, type);
    }

    public static ObjectType typeFromString(String type){
        System.out.println("checking type "+type);
        Set<String> types = BasicSchemaAttr.type.getOptions();
        for(String t: types){
            String[] parts = t.split("\\.");
            String lastPart = parts[parts.length-1];
            if(lastPart.equals("[B") && type.toLowerCase().equals("byte[]")){
                System.out.println("returning " + ObjectType.ByteArray.toString());
                return ObjectType.ByteArray;
            }else if(lastPart.equals("Integer") && type.toLowerCase().equals("int")){
                 System.out.println("returning " + ObjectType.Integer.toString());
                return ObjectType.Integer;
            }else if(lastPart.toLowerCase().equals(type.toLowerCase())){
                System.out.println("returning " + t);
                return ObjectType.fromString(t);
            }
        }
        System.out.println("default returning " + ObjectType.Object.toString());
        return ObjectType.Object;
    }
}